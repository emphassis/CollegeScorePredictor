﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace CollegeScorePredictor
{
    public partial class Minimal
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"TeamFirstDowns", @"TeamFirstDowns"),new InputOutputColumnPair(@"TeamTotalYards", @"TeamTotalYards"),new InputOutputColumnPair(@"TeamNetPassingYards", @"TeamNetPassingYards"),new InputOutputColumnPair(@"TeamRushingYards", @"TeamRushingYards"),new InputOutputColumnPair(@"TeamPossessionTime", @"TeamPossessionTime"),new InputOutputColumnPair(@"TeamPositivePlays", @"TeamPositivePlays"),new InputOutputColumnPair(@"TeamNegativePlays", @"TeamNegativePlays"),new InputOutputColumnPair(@"TeamPointsPerPlay", @"TeamPointsPerPlay"),new InputOutputColumnPair(@"OpponentFirstDownsAllowed", @"OpponentFirstDownsAllowed"),new InputOutputColumnPair(@"OpponentTotalYardsAllowed", @"OpponentTotalYardsAllowed"),new InputOutputColumnPair(@"OpponentPositivePlays", @"OpponentPositivePlays"),new InputOutputColumnPair(@"OpponentNegativePlays", @"OpponentNegativePlays"),new InputOutputColumnPair(@"OpponentDefensiveTacklesForLoss", @"OpponentDefensiveTacklesForLoss"),new InputOutputColumnPair(@"TeamTurnoverMargin", @"TeamTurnoverMargin"),new InputOutputColumnPair(@"OpponentTurnoverMargin", @"OpponentTurnoverMargin")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"TeamFirstDowns",@"TeamTotalYards",@"TeamNetPassingYards",@"TeamRushingYards",@"TeamPossessionTime",@"TeamPositivePlays",@"TeamNegativePlays",@"TeamPointsPerPlay",@"OpponentFirstDownsAllowed",@"OpponentTotalYardsAllowed",@"OpponentPositivePlays",@"OpponentNegativePlays",@"OpponentDefensiveTacklesForLoss",@"TeamTurnoverMargin",@"OpponentTurnoverMargin"}))      
                                    .Append(mlContext.Regression.Trainers.FastTree(new FastTreeRegressionTrainer.Options(){NumberOfLeaves=4,MinimumExampleCountPerLeaf=34,NumberOfTrees=81,MaximumBinCountPerFeature=183,FeatureFraction=0.99999999,LearningRate=0.999999776672986,LabelColumnName=@"TeamScore",FeatureColumnName=@"Features"}));

            return pipeline;
        }
    }
}
