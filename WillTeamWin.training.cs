﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Trainers;
using Microsoft.ML.Transforms;
using Microsoft.ML;

namespace CollegeScorePredictor
{
    public partial class WillTeamWin
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(new []{new InputOutputColumnPair(@"IsConference", @"IsConference"),new InputOutputColumnPair(@"IsNeutralSite", @"IsNeutralSite")}, outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"TeamId", @"TeamId"),new InputOutputColumnPair(@"TeamWins", @"TeamWins"),new InputOutputColumnPair(@"TeamLosses", @"TeamLosses"),new InputOutputColumnPair(@"TeamConference", @"TeamConference"),new InputOutputColumnPair(@"TeamChanceToWin", @"TeamChanceToWin"),new InputOutputColumnPair(@"TeamFirstDowns", @"TeamFirstDowns"),new InputOutputColumnPair(@"TeamNetPassingYards", @"TeamNetPassingYards"),new InputOutputColumnPair(@"TeamYardsPerPass", @"TeamYardsPerPass"),new InputOutputColumnPair(@"TeamPassingAttempts", @"TeamPassingAttempts"),new InputOutputColumnPair(@"TeamRushingAttempts", @"TeamRushingAttempts"),new InputOutputColumnPair(@"TeamYardsPerRushAttempt", @"TeamYardsPerRushAttempt"),new InputOutputColumnPair(@"TeamTotalPenalties", @"TeamTotalPenalties"),new InputOutputColumnPair(@"TeamTotalPenaltyYards", @"TeamTotalPenaltyYards"),new InputOutputColumnPair(@"TeamFumblesLost", @"TeamFumblesLost"),new InputOutputColumnPair(@"TeamInterceptions", @"TeamInterceptions"),new InputOutputColumnPair(@"TeamPossessionTime", @"TeamPossessionTime"),new InputOutputColumnPair(@"TeamPositivePlays", @"TeamPositivePlays"),new InputOutputColumnPair(@"TeamNegativePlays", @"TeamNegativePlays"),new InputOutputColumnPair(@"TeamDefensiveTacklesForLoss", @"TeamDefensiveTacklesForLoss"),new InputOutputColumnPair(@"TeamDefensiveSacks", @"TeamDefensiveSacks"),new InputOutputColumnPair(@"TeamFieldGoals", @"TeamFieldGoals"),new InputOutputColumnPair(@"TeamDefensiveSafety", @"TeamDefensiveSafety"),new InputOutputColumnPair(@"TeamSpecialTeamsPoints", @"TeamSpecialTeamsPoints"),new InputOutputColumnPair(@"TeamPointsPerPlay", @"TeamPointsPerPlay"),new InputOutputColumnPair(@"OpponentTeamId", @"OpponentTeamId"),new InputOutputColumnPair(@"OpponentWins", @"OpponentWins"),new InputOutputColumnPair(@"OpponentLosses", @"OpponentLosses"),new InputOutputColumnPair(@"OpponentConference", @"OpponentConference"),new InputOutputColumnPair(@"OpponentFirstDownsAllowed", @"OpponentFirstDownsAllowed"),new InputOutputColumnPair(@"OpponentPassingYardsAllowed", @"OpponentPassingYardsAllowed"),new InputOutputColumnPair(@"OpponentYardsPerPassAllowed", @"OpponentYardsPerPassAllowed"),new InputOutputColumnPair(@"OpponentYardsPerRushAttemptAllowed", @"OpponentYardsPerRushAttemptAllowed"),new InputOutputColumnPair(@"OpponentTotalPenalties", @"OpponentTotalPenalties"),new InputOutputColumnPair(@"OpponentTotalPenaltyYards", @"OpponentTotalPenaltyYards"),new InputOutputColumnPair(@"OpponentFumblesForced", @"OpponentFumblesForced"),new InputOutputColumnPair(@"OpponentInterceptionsForced", @"OpponentInterceptionsForced"),new InputOutputColumnPair(@"OpponentPossessionTime", @"OpponentPossessionTime"),new InputOutputColumnPair(@"OpponentPositivePlays", @"OpponentPositivePlays"),new InputOutputColumnPair(@"OpponentNegativePlays", @"OpponentNegativePlays"),new InputOutputColumnPair(@"OpponentDefensiveTacklesForLoss", @"OpponentDefensiveTacklesForLoss"),new InputOutputColumnPair(@"OpponentDefensiveSacks", @"OpponentDefensiveSacks"),new InputOutputColumnPair(@"OpponentFieldGoalsAllowed", @"OpponentFieldGoalsAllowed"),new InputOutputColumnPair(@"OpponentDefensiveSafety", @"OpponentDefensiveSafety"),new InputOutputColumnPair(@"OpponentSpecialTeamsPointsAllowed", @"OpponentSpecialTeamsPointsAllowed"),new InputOutputColumnPair(@"OpponentPointsPerPlay", @"OpponentPointsPerPlay"),new InputOutputColumnPair(@"TeamTurnoverMargin", @"TeamTurnoverMargin"),new InputOutputColumnPair(@"OpponentTurnoverMargin", @"OpponentTurnoverMargin")}))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"IsConference",@"IsNeutralSite",@"TeamId",@"TeamWins",@"TeamLosses",@"TeamConference",@"TeamChanceToWin",@"TeamFirstDowns",@"TeamNetPassingYards",@"TeamYardsPerPass",@"TeamPassingAttempts",@"TeamRushingAttempts",@"TeamYardsPerRushAttempt",@"TeamTotalPenalties",@"TeamTotalPenaltyYards",@"TeamFumblesLost",@"TeamInterceptions",@"TeamPossessionTime",@"TeamPositivePlays",@"TeamNegativePlays",@"TeamDefensiveTacklesForLoss",@"TeamDefensiveSacks",@"TeamFieldGoals",@"TeamDefensiveSafety",@"TeamSpecialTeamsPoints",@"TeamPointsPerPlay",@"OpponentTeamId",@"OpponentWins",@"OpponentLosses",@"OpponentConference",@"OpponentFirstDownsAllowed",@"OpponentPassingYardsAllowed",@"OpponentYardsPerPassAllowed",@"OpponentYardsPerRushAttemptAllowed",@"OpponentTotalPenalties",@"OpponentTotalPenaltyYards",@"OpponentFumblesForced",@"OpponentInterceptionsForced",@"OpponentPossessionTime",@"OpponentPositivePlays",@"OpponentNegativePlays",@"OpponentDefensiveTacklesForLoss",@"OpponentDefensiveSacks",@"OpponentFieldGoalsAllowed",@"OpponentDefensiveSafety",@"OpponentSpecialTeamsPointsAllowed",@"OpponentPointsPerPlay",@"TeamTurnoverMargin",@"OpponentTurnoverMargin"}))      
                                    .Append(mlContext.Regression.Trainers.FastTree(new FastTreeRegressionTrainer.Options(){NumberOfLeaves=13,MinimumExampleCountPerLeaf=94,NumberOfTrees=83,MaximumBinCountPerFeature=83,FeatureFraction=0.99999999,LearningRate=0.0475090601624753,LabelColumnName=@"TeamWon",FeatureColumnName=@"Features"}));

            return pipeline;
        }
    }
}
