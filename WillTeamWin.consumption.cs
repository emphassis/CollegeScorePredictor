// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace CollegeScorePredictor
{
    public partial class WillTeamWin
    {
        /// <summary>
        /// model input class for WillTeamWin.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"OffensiveModelId")]
            public float OffensiveModelId { get; set; }

            [ColumnName(@"EventId")]
            public float EventId { get; set; }

            [ColumnName(@"IsConference")]
            public bool IsConference { get; set; }

            [ColumnName(@"IsNeutralSite")]
            public bool IsNeutralSite { get; set; }

            [ColumnName(@"Week")]
            public float Week { get; set; }

            [ColumnName(@"Year")]
            public float Year { get; set; }

            [ColumnName(@"TeamId")]
            public float TeamId { get; set; }

            [ColumnName(@"TeamScore")]
            public float TeamScore { get; set; }

            [ColumnName(@"TeamWon")]
            public float TeamWon { get; set; }

            [ColumnName(@"TeamWins")]
            public float TeamWins { get; set; }

            [ColumnName(@"TeamLosses")]
            public float TeamLosses { get; set; }

            [ColumnName(@"TeamConference")]
            public float TeamConference { get; set; }

            [ColumnName(@"TeamChanceToWin")]
            public float TeamChanceToWin { get; set; }

            [ColumnName(@"TeamFirstDowns")]
            public float TeamFirstDowns { get; set; }

            [ColumnName(@"TeamTotalYards")]
            public float TeamTotalYards { get; set; }

            [ColumnName(@"TeamNetPassingYards")]
            public float TeamNetPassingYards { get; set; }

            [ColumnName(@"TeamYardsPerPass")]
            public float TeamYardsPerPass { get; set; }

            [ColumnName(@"TeamPassingAttempts")]
            public float TeamPassingAttempts { get; set; }

            [ColumnName(@"TeamRushingYards")]
            public float TeamRushingYards { get; set; }

            [ColumnName(@"TeamRushingAttempts")]
            public float TeamRushingAttempts { get; set; }

            [ColumnName(@"TeamYardsPerRushAttempt")]
            public float TeamYardsPerRushAttempt { get; set; }

            [ColumnName(@"TeamTotalPenalties")]
            public float TeamTotalPenalties { get; set; }

            [ColumnName(@"TeamTotalPenaltyYards")]
            public float TeamTotalPenaltyYards { get; set; }

            [ColumnName(@"TeamFumblesLost")]
            public float TeamFumblesLost { get; set; }

            [ColumnName(@"TeamInterceptions")]
            public float TeamInterceptions { get; set; }

            [ColumnName(@"TeamPossessionTime")]
            public float TeamPossessionTime { get; set; }

            [ColumnName(@"TeamPositivePlays")]
            public float TeamPositivePlays { get; set; }

            [ColumnName(@"TeamNegativePlays")]
            public float TeamNegativePlays { get; set; }

            [ColumnName(@"TeamDefensiveTacklesForLoss")]
            public float TeamDefensiveTacklesForLoss { get; set; }

            [ColumnName(@"TeamDefensiveSacks")]
            public float TeamDefensiveSacks { get; set; }

            [ColumnName(@"TeamFieldGoals")]
            public float TeamFieldGoals { get; set; }

            [ColumnName(@"TeamDefensiveSafety")]
            public float TeamDefensiveSafety { get; set; }

            [ColumnName(@"TeamSpecialTeamsPoints")]
            public float TeamSpecialTeamsPoints { get; set; }

            [ColumnName(@"TeamPointsPerPlay")]
            public float TeamPointsPerPlay { get; set; }

            [ColumnName(@"OpponentTeamId")]
            public float OpponentTeamId { get; set; }

            [ColumnName(@"OpponentWins")]
            public float OpponentWins { get; set; }

            [ColumnName(@"OpponentLosses")]
            public float OpponentLosses { get; set; }

            [ColumnName(@"OpponentConference")]
            public float OpponentConference { get; set; }

            [ColumnName(@"OpponentScore")]
            public float OpponentScore { get; set; }

            [ColumnName(@"OpponentFirstDownsAllowed")]
            public float OpponentFirstDownsAllowed { get; set; }

            [ColumnName(@"OpponentTotalYardsAllowed")]
            public float OpponentTotalYardsAllowed { get; set; }

            [ColumnName(@"OpponentPassingYardsAllowed")]
            public float OpponentPassingYardsAllowed { get; set; }

            [ColumnName(@"OpponentRushingYardsAllowed")]
            public float OpponentRushingYardsAllowed { get; set; }

            [ColumnName(@"OpponentYardsPerPassAllowed")]
            public float OpponentYardsPerPassAllowed { get; set; }

            [ColumnName(@"OpponentYardsPerRushAttemptAllowed")]
            public float OpponentYardsPerRushAttemptAllowed { get; set; }

            [ColumnName(@"OpponentTotalPenalties")]
            public float OpponentTotalPenalties { get; set; }

            [ColumnName(@"OpponentTotalPenaltyYards")]
            public float OpponentTotalPenaltyYards { get; set; }

            [ColumnName(@"OpponentFumblesForced")]
            public float OpponentFumblesForced { get; set; }

            [ColumnName(@"OpponentInterceptionsForced")]
            public float OpponentInterceptionsForced { get; set; }

            [ColumnName(@"OpponentPossessionTime")]
            public float OpponentPossessionTime { get; set; }

            [ColumnName(@"OpponentPositivePlays")]
            public float OpponentPositivePlays { get; set; }

            [ColumnName(@"OpponentNegativePlays")]
            public float OpponentNegativePlays { get; set; }

            [ColumnName(@"OpponentDefensiveTacklesForLoss")]
            public float OpponentDefensiveTacklesForLoss { get; set; }

            [ColumnName(@"OpponentDefensiveSacks")]
            public float OpponentDefensiveSacks { get; set; }

            [ColumnName(@"OpponentFieldGoalsAllowed")]
            public float OpponentFieldGoalsAllowed { get; set; }

            [ColumnName(@"OpponentDefensiveSafety")]
            public float OpponentDefensiveSafety { get; set; }

            [ColumnName(@"OpponentSpecialTeamsPointsAllowed")]
            public float OpponentSpecialTeamsPointsAllowed { get; set; }

            [ColumnName(@"OpponentPointsPerPlay")]
            public float OpponentPointsPerPlay { get; set; }

            [ColumnName(@"CreatedDate")]
            public DateTime CreatedDate { get; set; }

            [ColumnName(@"TeamTurnoverMargin")]
            public float TeamTurnoverMargin { get; set; }

            [ColumnName(@"OpponentTurnoverMargin")]
            public float OpponentTurnoverMargin { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for WillTeamWin.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"OffensiveModelId")]
            public float OffensiveModelId { get; set; }

            [ColumnName(@"EventId")]
            public float EventId { get; set; }

            [ColumnName(@"IsConference")]
            public float[] IsConference { get; set; }

            [ColumnName(@"IsNeutralSite")]
            public float[] IsNeutralSite { get; set; }

            [ColumnName(@"Week")]
            public float Week { get; set; }

            [ColumnName(@"Year")]
            public float Year { get; set; }

            [ColumnName(@"TeamId")]
            public float TeamId { get; set; }

            [ColumnName(@"TeamScore")]
            public float TeamScore { get; set; }

            [ColumnName(@"TeamWon")]
            public float TeamWon { get; set; }

            [ColumnName(@"TeamWins")]
            public float TeamWins { get; set; }

            [ColumnName(@"TeamLosses")]
            public float TeamLosses { get; set; }

            [ColumnName(@"TeamConference")]
            public float TeamConference { get; set; }

            [ColumnName(@"TeamChanceToWin")]
            public float TeamChanceToWin { get; set; }

            [ColumnName(@"TeamFirstDowns")]
            public float TeamFirstDowns { get; set; }

            [ColumnName(@"TeamTotalYards")]
            public float TeamTotalYards { get; set; }

            [ColumnName(@"TeamNetPassingYards")]
            public float TeamNetPassingYards { get; set; }

            [ColumnName(@"TeamYardsPerPass")]
            public float TeamYardsPerPass { get; set; }

            [ColumnName(@"TeamPassingAttempts")]
            public float TeamPassingAttempts { get; set; }

            [ColumnName(@"TeamRushingYards")]
            public float TeamRushingYards { get; set; }

            [ColumnName(@"TeamRushingAttempts")]
            public float TeamRushingAttempts { get; set; }

            [ColumnName(@"TeamYardsPerRushAttempt")]
            public float TeamYardsPerRushAttempt { get; set; }

            [ColumnName(@"TeamTotalPenalties")]
            public float TeamTotalPenalties { get; set; }

            [ColumnName(@"TeamTotalPenaltyYards")]
            public float TeamTotalPenaltyYards { get; set; }

            [ColumnName(@"TeamFumblesLost")]
            public float TeamFumblesLost { get; set; }

            [ColumnName(@"TeamInterceptions")]
            public float TeamInterceptions { get; set; }

            [ColumnName(@"TeamPossessionTime")]
            public float TeamPossessionTime { get; set; }

            [ColumnName(@"TeamPositivePlays")]
            public float TeamPositivePlays { get; set; }

            [ColumnName(@"TeamNegativePlays")]
            public float TeamNegativePlays { get; set; }

            [ColumnName(@"TeamDefensiveTacklesForLoss")]
            public float TeamDefensiveTacklesForLoss { get; set; }

            [ColumnName(@"TeamDefensiveSacks")]
            public float TeamDefensiveSacks { get; set; }

            [ColumnName(@"TeamFieldGoals")]
            public float TeamFieldGoals { get; set; }

            [ColumnName(@"TeamDefensiveSafety")]
            public float TeamDefensiveSafety { get; set; }

            [ColumnName(@"TeamSpecialTeamsPoints")]
            public float TeamSpecialTeamsPoints { get; set; }

            [ColumnName(@"TeamPointsPerPlay")]
            public float TeamPointsPerPlay { get; set; }

            [ColumnName(@"OpponentTeamId")]
            public float OpponentTeamId { get; set; }

            [ColumnName(@"OpponentWins")]
            public float OpponentWins { get; set; }

            [ColumnName(@"OpponentLosses")]
            public float OpponentLosses { get; set; }

            [ColumnName(@"OpponentConference")]
            public float OpponentConference { get; set; }

            [ColumnName(@"OpponentScore")]
            public float OpponentScore { get; set; }

            [ColumnName(@"OpponentFirstDownsAllowed")]
            public float OpponentFirstDownsAllowed { get; set; }

            [ColumnName(@"OpponentTotalYardsAllowed")]
            public float OpponentTotalYardsAllowed { get; set; }

            [ColumnName(@"OpponentPassingYardsAllowed")]
            public float OpponentPassingYardsAllowed { get; set; }

            [ColumnName(@"OpponentRushingYardsAllowed")]
            public float OpponentRushingYardsAllowed { get; set; }

            [ColumnName(@"OpponentYardsPerPassAllowed")]
            public float OpponentYardsPerPassAllowed { get; set; }

            [ColumnName(@"OpponentYardsPerRushAttemptAllowed")]
            public float OpponentYardsPerRushAttemptAllowed { get; set; }

            [ColumnName(@"OpponentTotalPenalties")]
            public float OpponentTotalPenalties { get; set; }

            [ColumnName(@"OpponentTotalPenaltyYards")]
            public float OpponentTotalPenaltyYards { get; set; }

            [ColumnName(@"OpponentFumblesForced")]
            public float OpponentFumblesForced { get; set; }

            [ColumnName(@"OpponentInterceptionsForced")]
            public float OpponentInterceptionsForced { get; set; }

            [ColumnName(@"OpponentPossessionTime")]
            public float OpponentPossessionTime { get; set; }

            [ColumnName(@"OpponentPositivePlays")]
            public float OpponentPositivePlays { get; set; }

            [ColumnName(@"OpponentNegativePlays")]
            public float OpponentNegativePlays { get; set; }

            [ColumnName(@"OpponentDefensiveTacklesForLoss")]
            public float OpponentDefensiveTacklesForLoss { get; set; }

            [ColumnName(@"OpponentDefensiveSacks")]
            public float OpponentDefensiveSacks { get; set; }

            [ColumnName(@"OpponentFieldGoalsAllowed")]
            public float OpponentFieldGoalsAllowed { get; set; }

            [ColumnName(@"OpponentDefensiveSafety")]
            public float OpponentDefensiveSafety { get; set; }

            [ColumnName(@"OpponentSpecialTeamsPointsAllowed")]
            public float OpponentSpecialTeamsPointsAllowed { get; set; }

            [ColumnName(@"OpponentPointsPerPlay")]
            public float OpponentPointsPerPlay { get; set; }

            [ColumnName(@"CreatedDate")]
            public DateTime CreatedDate { get; set; }

            [ColumnName(@"TeamTurnoverMargin")]
            public float TeamTurnoverMargin { get; set; }

            [ColumnName(@"OpponentTurnoverMargin")]
            public float OpponentTurnoverMargin { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"Score")]
            public float Score { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("WillTeamWin.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
